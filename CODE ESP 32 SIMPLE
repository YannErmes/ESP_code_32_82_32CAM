#include <WiFi.h>
#include <ArduinoJson.h>

// Configuration WiFi
const char* ssid = "N1";
const char* password = "yannyann";
WiFiServer server(80);

// Définition des broches
const int Led1 = 5;  // GPIO 5 (D1 sur certains modules)
const int Led2 = 18; // GPIO 18 (D2 sur certains modules)

void setup() {
    Serial.begin(115200);
    connecterWiFi();
    afficherInfosESP();
    
    pinMode(Led1, OUTPUT);
    pinMode(Led2, OUTPUT);
    
    server.begin();
    Serial.println("Serveur démarré !");
}

void loop() {
    gererClients();
}

// Gestion des clients WiFi
void gererClients() {
    WiFiClient client = server.available();
    if (!client) return;

    Serial.println("Nouveau client connecté !");
    String request = client.readStringUntil('\r');
    Serial.println("Requête reçue: " + request);
    traiterRequete(client, request);
}

// Traitement des requêtes
void traiterRequete(WiFiClient& client, String request) {
    if (request.indexOf("/get_info") != -1) {
        handleGetInfo(client);
    } else if (request.indexOf("/led1/on") != -1) {
        digitalWrite(Led1, HIGH);
        sendJsonResponse(client, "Led1 allumée");
    } else if (request.indexOf("/led1/off") != -1) {
        digitalWrite(Led1, LOW);
        sendJsonResponse(client, "Led1 éteinte");
    } else if (request.indexOf("/led2/on") != -1) {
        digitalWrite(Led2, HIGH);
        sendJsonResponse(client, "Led2 allumée");
    } else if (request.indexOf("/led2/off") != -1) {
        digitalWrite(Led2, LOW);
        sendJsonResponse(client, "Led2 éteinte");
    } else {
        sendJsonResponse(client, "Commande inconnue");
    }
}

// Connexion au WiFi
void connecterWiFi() {
    Serial.printf("Connexion à %s...", ssid);
    WiFi.begin(ssid, password);
    while (WiFi.status() != WL_CONNECTED) {
        delay(500);
        Serial.print(".");
    }
    Serial.println("\nConnecté !");
}

// Affichage des infos de l'ESP32
void afficherInfosESP() {
    Serial.println("=================================");
    Serial.println("Informations du module ESP32:");
    Serial.println("Adresse IP: " + WiFi.localIP().toString());
    Serial.println("Adresse MAC: " + WiFi.macAddress());
    Serial.printf("Puissance du Signal WiFi (RSSI) : %d dBm\n", WiFi.RSSI());
    Serial.println("=================================");
}

// Réponse JSON
void sendJsonResponse(WiFiClient& client, String message) {
    StaticJsonDocument<256> doc;
    doc["message"] = message;
    String jsonResponse;
    serializeJson(doc, jsonResponse);
    
    client.println("HTTP/1.1 200 OK");
    client.println("Content-Type: application/json");
    client.println("Connection: close");
    client.println();
    client.println(jsonResponse);
}

// Informations système en JSON
void handleGetInfo(WiFiClient& client) {
    StaticJsonDocument<512> doc;
    doc["wifi"] = WiFi.SSID();
    doc["ip_address"] = WiFi.localIP().toString();
    doc["mac_address"] = WiFi.macAddress();
    doc["signal_strength"] = WiFi.RSSI();

    String jsonResponse;
    serializeJson(doc, jsonResponse);
    
    client.println("HTTP/1.1 200 OK");
    client.println("Content-Type: application/json");
    client.println("Connection: close");
    client.println();
    client.println(jsonResponse);
}

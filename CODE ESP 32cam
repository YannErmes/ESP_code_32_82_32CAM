#include <WiFi.h>
#include <ArduinoJson.h>

// Configuration WiFi
const char* ssid = "N1";
const char* password = "yannyann";
WiFiServer server(80);

// Définir des broches libres pour les LEDs
int Led1 = 2;    // GPIO2 — souvent utilisée pour le flash, à changer si besoin
int Led2 = 15;   // GPIO15 — OK pour usage LED si caméra inactive

void setup() {
  Serial.begin(115200);
  delay(1000);

  connecterWiFi();
  afficherInfosESP();

  pinMode(Led1, OUTPUT);
  pinMode(Led2, OUTPUT);

  server.begin();
}

void loop() {
  gererClients();
}

void traiterRequete(WiFiClient& client, String request) {
  if (request.indexOf("/get_info") != -1) {
    handleGetInfo(client);
  } else {
    if (request.indexOf("/led1") != -1) {
      digitalWrite(Led1, HIGH);
      Serial.println("La LED1 est allumée");
    } else if (request.indexOf("/temp") != -1) {
      digitalWrite(Led1, HIGH);
      Serial.println("Temp : LED1 allumée");

      StaticJsonDocument<512> docu;
      docu["Ecran1"] = "110";
      String jsonResponse;
      serializeJson(docu, jsonResponse);

      client.println("HTTP/1.1 200 OK");
      client.println("Content-Type: application/json");
      client.println("Connection: close");
      client.println();
      client.println(jsonResponse);
    }
  }
}

void gererClients() {
  WiFiClient client = server.available();
  if (!client) return;

  Serial.println("Nouveau client connecté !");
  String request = client.readStringUntil('\r');
  Serial.println("Requête: " + request);
  client.flush();

  traiterRequete(client, request);
}

void connecterWiFi() {
  Serial.printf("Connexion à %s", ssid);
  WiFi.begin(ssid, password);

  while (WiFi.status() != WL_CONNECTED) {
    delay(500);
    Serial.print(".");
  }

  Serial.println("\nConnecté !");
  Serial.print("Adresse IP : ");
  Serial.println(WiFi.localIP());
}

void afficherInfosESP() {
  Serial.println("=================================");
  Serial.println("Informations du module ESP32-CAM:");
  Serial.println("Adresse IP: " + WiFi.localIP().toString());
  Serial.println("Adresse MAC: " + WiFi.macAddress());
  Serial.printf("Puissance du Signal WiFi (RSSI) : %d dBm\n", WiFi.RSSI());
  Serial.println("Adresse IP de la passerelle: " + WiFi.gatewayIP().toString());
  Serial.printf("Utilisation de la mémoire RAM: %d bytes\n", ESP.getFreeHeap());
  Serial.printf("Mémoire Flash disponible: %d bytes (%.2f Mo)\n", ESP.getFlashChipSize(), ESP.getFlashChipSize() / 1048576.0);
  Serial.printf("Temps de fonctionnement : %lu ms\n", millis());
  Serial.println("=================================");
}

void sendHtmlResponse(WiFiClient& client, String message) {
  client.println("HTTP/1.1 200 OK");
  client.println("Content-Type: text/html");
  client.println("Connection: close");
  client.println();
  client.println("<!DOCTYPE HTML>");
  client.println("<html>");
  client.println("<h1>ESP32-CAM Server</h1>");
  client.println("<p>" + message + "</p>");
  client.println("</html>");
}

void handleGetInfo(WiFiClient& client) {
  StaticJsonDocument<512> doc;
  doc["Wifi"] = WiFi.SSID();
  doc["ip_address"] = WiFi.localIP().toString();
  doc["mac_address"] = WiFi.macAddress();
  doc["signal_strength"] = WiFi.RSSI();
  doc["gateway_ip"] = WiFi.gatewayIP().toString();
  doc["free_memory"] = ESP.getFreeHeap();
  doc["flash_memory"] = ESP.getFlashChipSize();

  String jsonResponse;
  serializeJson(doc, jsonResponse);

  client.println("HTTP/1.1 200 OK");
  client.println("Content-Type: application/json");
  client.println("Connection: close");
  client.println();
  client.println(jsonResponse);
}

#include <ESP8266WiFi.h>
#include <ESPAsyncWebServer.h>
#include <ArduinoJson.h>

// Wi-Fi credentials
const char* ssid = "N1";
const char* password = "yannyann";

// Serveur et WebSocket
AsyncWebServer server(80);
AsyncWebSocket ws("/ws");

// Variables globales
String lastCommand = "";
String statusMessage = "";
String ecran2 = "700";
String indicateur1 = "0.36";
String bulb1 = "true";
String bulb2 = "true";

unsigned long lastUpdateTime = 0; // ‚Üê Ajout


// lutiliserles pin 
int del = D1 ;

void onWebSocketEvent(AsyncWebSocket *server, AsyncWebSocketClient *client,
                      AwsEventType type, void *arg, uint8_t *data, size_t len) {
  if (type == WS_EVT_CONNECT) {
    Serial.println("‚úÖ WebSocket client connected");
  } 
  else if (type == WS_EVT_DATA) {
    String msg = "";
    for (size_t i = 0; i < len; i++) {
      msg += (char)data[i];
    }

    Serial.print("üì© Received command: ");
    Serial.println(msg);

    lastCommand = msg;
  }
}

void setup() {
  Serial.begin(115200);
  WiFi.begin(ssid, password);

  while (WiFi.status() != WL_CONNECTED) {
    delay(500);
    Serial.print(".");
  }
  Serial.println("\n‚úÖ WiFi connected");
   // Print the IP address to the Serial monitor
  Serial.print("IP Address: ");
  Serial.println(WiFi.localIP());

  ws.onEvent(onWebSocketEvent);
  server.addHandler(&ws);
  server.begin();

  pinMode(LED_BUILTIN, OUTPUT);
  digitalWrite(LED_BUILTIN, HIGH); 

  // set fin

  pinMode(del, INPUT);

}

void loop() {
  // üîÅ Lecture de la commande WebSocket
  if (lastCommand.length() > 0) {
    if (lastCommand == "tg2on") {
      digitalWrite(LED_BUILTIN, LOW);
      statusMessage = "LED turned ON";
      bulb1 = "true";
    } 
    else if (lastCommand == "tg2off") {
      digitalWrite(LED_BUILTIN, HIGH);
      statusMessage = "LED turned OFF";
      bulb1 = "false";
    } 
    else {
      statusMessage = "Unknown command";
    }

    sendJSONResponse();
    lastCommand = "";
  }

  // ‚úÖ Auto-update toutes les secondes
  // if (millis() - lastUpdateTime > 1000) {
  //   int val = random(500, 900);
  //   float ind = random(20, 60) / 100.0;

  //   ecran2 = String(val);
  //   indicateur1 = String(ind, 2);

  //   statusMessage = "üì° Auto-update";
  //   sendJSONResponse();

  //   lastUpdateTime = millis();
  // }
}





void sendJSONResponse() {

  
  StaticJsonDocument<200> doc;
  doc["status"] = "ok";
  doc["message"] = statusMessage;
  doc["Ecran2"] = ecran2;
  doc["Indicateur1"] = indicateur1;
  doc["bulb1"] = bulb1;
  doc["bulb2"] = bulb2;






  doc["Wifi"] = WiFi.SSID();
  doc["ip_address"] = WiFi.localIP().toString();
  doc["mac_address"] = WiFi.macAddress();
  doc["signal_strength"] = WiFi.RSSI();
  doc["gateway_ip"] = WiFi.gatewayIP().toString();
  doc["free_memory"] = ESP.getFreeHeap();
  doc["flash_memory"] = ESP.getFlashChipSize();



 
 

  String response;
  serializeJson(doc, response);
  ws.textAll(response);

  Serial.println("üì§ Sent JSON: " + response);
}


#include <ESP8266WiFi.h>
#include <ArduinoJson.h>
#include <Servo.h>

// Configuration WiFi
const char* ssid = "N1";
const char* password = "yannyann";
WiFiServer server(80);

// Définition des broches
int capteur1 = D1;
int ledTemoin = D6;

void setup() {
  Serial.begin(115200);
  connecterWiFi();
  afficherInfosESP();
  server.begin();

  // Initialisation des broches
  pinMode(capteur1, INPUT);
  pinMode(ledTemoin, OUTPUT);
}

void loop() {
  gererClients();
  delay(500);
}

// ------------------ GESTION DES CLIENTS ------------------

void gererClients() {
  WiFiClient client = server.available();
  if (!client) return;

  Serial.println("Nouveau client connecté !");
  String request = client.readStringUntil('\r');
  Serial.println("Requête: " + request);

  traiterRequete(client, request);
}

// ------------------ ROUTEUR DE REQUÊTES ------------------

void traiterRequete(WiFiClient& client, String request) {
  if (request.indexOf("/get_info") != -1) {
    handleGetInfo(client);
  } else if (digitalRead(capteur1) == HIGH) {
    txt_reponse(client,"there is an object  ," );
     Serial.println("obb");
   
  } else {
    // txt_reponse(client,"yann" );
  }
}

// ------------------ RÉPONSES JSON ------------------

void txt_reponse(WiFiClient& client , String message) {
  StaticJsonDocument<512> docue;
  // ajouter la variable et le nom de l'ecan
docue["reponse"] = message;

  
  String jsonResponse;
  serializeJson(docue, jsonResponse);

  client.println("HTTP/1.1 200 OK");
  client.println("Content-Type: application/json");
  client.println("Connection: close");
  client.println();
  client.println(jsonResponse);

}


void handleGetInfo(WiFiClient& client) {
  StaticJsonDocument<512> doc;
  doc["Wifi"] = WiFi.SSID();
  doc["ip_address"] = WiFi.localIP().toString();
  doc["mac_address"] = WiFi.macAddress();
  doc["signal_strength"] = WiFi.RSSI();
  doc["gateway_ip"] = WiFi.gatewayIP().toString();
  doc["free_memory"] = ESP.getFreeHeap();
  doc["flash_memory"] = ESP.getFlashChipSize();

  String jsonResponse;
  serializeJson(doc, jsonResponse);

  client.println("HTTP/1.1 200 OK");
  client.println("Content-Type: application/json");
  client.println("Connection: close");
  client.println();
  client.println(jsonResponse);

  
}

// ------------------ FONCTIONS WiFi ------------------

void connecterWiFi() {
  Serial.printf("Connexion à %s", ssid);
  WiFi.begin(ssid, password);

  while (WiFi.status() != WL_CONNECTED) {
    delay(500);
    Serial.print(".");
  }

  Serial.println("\nConnecté !");
}

void afficherInfosESP() {
  Serial.println("=================================");
  Serial.println("Informations du module ESP8266:");
  Serial.println("Adresse IP: " + WiFi.localIP().toString());
  Serial.println("Adresse MAC: " + WiFi.macAddress());
  Serial.printf("Puissance du Signal WiFi (RSSI) : %d dBm\n", WiFi.RSSI());
  Serial.println("Adresse IP de la passerelle: " + WiFi.gatewayIP().toString());
  Serial.printf("Utilisation de la mémoire RAM: %d bytes\n", ESP.getFreeHeap());
  Serial.printf("Mémoire Flash disponible: %d bytes (%.2f Mo)\n", ESP.getFlashChipSize(), ESP.getFlashChipSize() / 1048576.0);
  Serial.printf("Temps de fonctionnement : %lu ms\n", millis());
  Serial.println("=================================");
}

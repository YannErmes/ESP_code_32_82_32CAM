


// Inclure les biblioth√®ques n√©cessaires
#include <ESP8266WiFi.h> // Biblioth√®que pour la fonctionnalit√© Wi-Fi de l'ESP8266
#include <ESPAsyncWebServer.h> // Biblioth√®que pour la fonctionnalit√© de serveur web asynchrone
#include <ArduinoJson.h> // Biblioth√®que pour la s√©rialisation et la d√©s√©rialisation JSON

/* ----------- Configuration Wi-Fi ----------- */
const char* WIFI_SSID = "N1"; // SSID du r√©seau Wi-Fi
const char* WIFI_PASSWORD = "yannyany"; // Mot de passe du r√©seau Wi-Fi

/* ----------- Configuration WebSocket ----------- */
AsyncWebServer server(80); // Cr√©er un serveur web asynchrone sur le port 80
AsyncWebSocket ws("/ws"); // Cr√©er un point de terminaison WebSocket √† "/ws"

/* ----------- Variables d'√©tat globales ----------- */
String lastCommand = ""; // Stocke la derni√®re commande re√ßue
String statusMessage = ""; // Stocke le message d'√©tat √† envoyer

/* ----------- Minuterie pour la mise √† jour automatique ----------- */
unsigned long lastUpdateTime = 0; // Stocke le dernier temps de mise √† jour
const unsigned long updateInterval = 1000; // Intervalle de mise √† jour d√©fini √† 1 seconde (1000 millisecondes)

/* ----------- Prototypes de fonctions ----------- */
void initWiFi(); // Fonction pour initialiser la connexion Wi-Fi
void initWebSocket(); // Fonction pour initialiser WebSocket
void handleWebSocketCommand(); // Fonction pour g√©rer les commandes WebSocket
void sendJson(); // Fonction pour envoyer des donn√©es JSON
void sendAutoUpdate(); // Fonction pour envoyer des mises √† jour automatiques
void onWsEvent(AsyncWebSocket* server, AsyncWebSocketClient* client, AwsEventType type, void* arg, uint8_t* data, size_t len); // Gestionnaire d'√©v√©nements WebSocket

/* ----------- D√©finitions des broches ----------- */
// Exemple : int led_gauche = D1; // D√©finir la broche pour la LED de gauche

/* ----------- Variables globales ----------- */
String b = "true";

void setup() {
  Serial.begin(115200); // Initialiser la communication s√©rie √† 115200 bauds
  initWiFi(); // Initialiser la connexion Wi-Fi
  initWebSocket(); // Initialiser WebSocket
  pinMode(LED_BUILTIN, OUTPUT); // D√©finir la broche de la LED int√©gr√©e comme sortie


}

void loop() {















//------------------espace a ne pas modifi√© --------------------
  handleWebSocketCommand(); // G√©rer les commandes WebSocket
  // Mise √† jour r√©guli√®re toutes les 1 seconde
  if (millis() - lastUpdateTime > updateInterval) {
    sendAutoUpdate(); // Envoyer la mise √† jour automatique
    lastUpdateTime = millis(); // Mettre √† jour le dernier temps de mise √† jour
  }


}// fin de la fonction loop



/* ----------- Traitement des commandes ----------- */
void handleWebSocketCommand() {
  if (lastCommand.isEmpty()) return; 

  if (lastCommand == "tg2on") { // Allumer la LED
    digitalWrite(LED_BUILTIN, HIGH);
    b = "true";
    statusMessage = "LED ALLUM√âE";
  } else if (lastCommand == "tg2off") { // √âteindre la LED
    digitalWrite(LED_BUILTIN, LOW);
     b = "false";
    statusMessage = "LED √âTEINTE";
  } else { // Commande inconnue
    statusMessage = "Commande inconnue";
  }

  lastCommand = ""; 
}

/* ----------- Envoyer une mise √† jour automatique ----------- */
void sendAutoUpdate() {
  StaticJsonDocument<192> doc; // Cr√©er un document JSON

  // Ajouter l'√©tat de la LED et d'autres donn√©es au document JSON
  
 
  doc["Ecran1"] = millis();
  doc["Ecran2"] = statusMessage;
  doc["Ecran3"] = digitalRead(LED_BUILTIN) == HIGH ? "on" : "off";
  doc["Ecran4"] = b;

  doc["Indicateur1"] = 0.70;
  doc["Indicateur2"] = 0.30;
  doc["Indicateur3"] = 0.54;

 
  doc["bulb1"]  =   b;
  doc["Bulb2"]  =  "false";
  doc["Bulb3"]  =  "true";
  doc["Bulb4"]  =  "false";

  // Ajouter les informations d'√©tat de l'ESP au document JSON
  doc["status"] = "auto-update";
  doc["message"] = statusMessage;
  doc["Wifi"] = WiFi.SSID();
  doc["ip_address"] = WiFi.localIP().toString();
  doc["mac_address"] = WiFi.macAddress();
  doc["signal_strength"] = WiFi.RSSI();
  doc["gateway_ip"] = WiFi.gatewayIP().toString();
  doc["free_memory"] = ESP.getFreeHeap();
  doc["flash_memory"] = ESP.getFlashChipSize();

  String payload;
  serializeJson(doc, payload); // S√©rialiser le document JSON en cha√Æne de caract√®res
  ws.textAll(payload); // Envoyer la cha√Æne JSON √† tous les clients WebSocket

  Serial.println("üîÑ Mise √† jour automatique envoy√©e"); // Afficher le message de mise √† jour envoy√©e
}









// ------------------espace a ne pas toucher -----------------------


/* ----------- Initialisation Wi-Fi ----------- */
void initWiFi() {
  WiFi.begin(WIFI_SSID, WIFI_PASSWORD); // Se connecter au r√©seau Wi-Fi
  Serial.print("Connexion au WiFi .."); // Afficher le message de connexion

  while (WiFi.status() != WL_CONNECTED) { // Attendre la connexion
    Serial.print('.'); // Afficher des points pendant la connexion
    delay(1000); // Attendre 1 seconde
  }

  Serial.println(WiFi.localIP()); // Afficher l'adresse IP locale
}

/* ----------- Initialisation WebSocket ----------- */
void initWebSocket() {
  ws.onEvent(onWsEvent); // D√©finir le gestionnaire d'√©v√©nements WebSocket
  server.addHandler(&ws); // Ajouter le gestionnaire WebSocket au serveur
  server.begin(); // D√©marrer le serveur
}

/* ----------- Gestionnaire d'√©v√©nements WebSocket ----------- */
void onWsEvent(AsyncWebSocket* server, AsyncWebSocketClient* client, AwsEventType type, void* arg, uint8_t* data, size_t len) {
  switch (type) {
    case WS_EVT_CONNECT: // Client connect√©
      Serial.printf("Client WebSocket #%u connect√© depuis %s\n", client->id(), client->remoteIP().toString().c_str());
      break;
    case WS_EVT_DISCONNECT: // Client d√©connect√©
      Serial.printf("Client WebSocket #%u d√©connect√©\n", client->id());
      break;
    case WS_EVT_DATA: // Donn√©es re√ßues
      AwsFrameInfo* info = (AwsFrameInfo*)arg;
      if (info->final && info->index == 0 && info->len == len && info->opcode == WS_TEXT) {
        data[len] = 0; // Terminer les donn√©es par un caract√®re nul
        lastCommand = (char*)data; // Stocker la commande re√ßue
        Serial.printf("Commande re√ßue : %s\n", (char*)data); // Afficher la commande re√ßue
      }
      break;
  }
}


